package commitprompts

import (
	"fmt"
)

const PromptType1 = `Voc√™ √© um especialista em an√°lise de c√≥digo e gera√ß√£o de mensagens de commit sem√¢nticas.

Analise as seguintes modifica√ß√µes de c√≥digo e gere uma mensagem de commit sem√¢ntica:

MODIFICA√á√ïES:
%s

INFORMA√á√ïES ADICIONAIS:
- Idioma para o commit: %s
- Descri√ß√£o curta fornecida pelo usu√°rio: %s
- Tag sugerida pelo usu√°rio (use se apropriada): %s

INSTRU√á√ïES:
1. Analise cuidadosamente as modifica√ß√µes para entender o prop√≥sito da mudan√ßa
2. Determine a tag sem√¢ntica mais apropriada entre:
   - feat: Uma nova funcionalidade
   - fix: Corre√ß√£o de um bug
   - docs: Altera√ß√µes em documenta√ß√£o
   - style: Mudan√ßas que n√£o afetam o significado do c√≥digo (formata√ß√£o, etc)
   - refactor: Refatora√ß√£o de c√≥digo existente
   - perf: Melhorias de desempenho
   - test: Adi√ß√£o ou corre√ß√£o de testes
   - chore: Mudan√ßas no processo de build, ferramentas, etc
   - revert: Revers√£o de um commit anterior
   - cleanup: Remo√ß√£o de c√≥digo obsoleto ou limpeza
   - build: Mudan√ßas que afetam o sistema de build ou depend√™ncias externas
   - remover: Remo√ß√£o de funcionalidades ou arquivos
3. Se o usu√°rio forneceu uma tag, utilize-a apenas se for coerente com as modifica√ß√µes
4. Identifique a pasta principal ou arquivo principal que foi modificado
5. Crie um t√≠tulo conciso que explique a mudan√ßa (n√£o mais que 50 caracteres)
6. Use o idioma especificado pelo usu√°rio
7. Regras de formata√ß√£o importantes:
   - use apenas letras min√∫sculas na mensagem de commit
   - n√£o use aspas (simples ou duplas) na mensagem
   - evite caracteres especiais como \ ou outros s√≠mbolos n√£o essenciais
8. Se emoji estiver habilitado: escolha o emoji apropriado e coloque DEPOIS da tag, formato: "tag(arquivo_ou_pasta) emoji: t√≠tulo"
9. Se emoji N√ÉO estiver habilitado: formato padr√£o "tag(arquivo_ou_pasta_principal): t√≠tulo conciso da mudan√ßa"

Retorne APENAS a mensagem de commit formatada, sem explica√ß√µes adicionais.

Exemplos SEM emoji:
- feat(controller): implementa autenticacao de usuarios
- fix(utils): corrige calculo de data incorreto
- docs(readme): atualiza instrucoes de instalacao

Exemplos COM emoji:
- feat(controller) ‚ú®: implementa autenticacao de usuarios
- fix(utils) üêõ: corrige calculo de data incorreto
- docs(readme) üìù: atualiza instrucoes de instalacao`

const PromptType2 = `Voc√™ √© um especialista em an√°lise de c√≥digo e gera√ß√£o de mensagens de commit sem√¢nticas.

Analise as seguintes modifica√ß√µes de c√≥digo e gere uma mensagem de commit sem√¢ntica:

MODIFICA√á√ïES:
%s

INFORMA√á√ïES ADICIONAIS:
- Idioma para o commit: %s
- Descri√ß√£o curta fornecida pelo usu√°rio: %s
- Tag sugerida pelo usu√°rio (use se apropriada): %s

INSTRU√á√ïES:
1. Analise cuidadosamente as modifica√ß√µes para entender o prop√≥sito da mudan√ßa
2. Determine a tag sem√¢ntica mais apropriada entre:
   - feat: Uma nova funcionalidade
   - fix: Corre√ß√£o de um bug
   - docs: Altera√ß√µes em documenta√ß√£o
   - style: Mudan√ßas que n√£o afetam o significado do c√≥digo (formata√ß√£o, etc)
   - refactor: Refatora√ß√£o de c√≥digo existente
   - perf: Melhorias de desempenho
   - test: Adi√ß√£o ou corre√ß√£o de testes
   - chore: Mudan√ßas no processo de build, ferramentas, etc
   - revert: Revers√£o de um commit anterior
   - cleanup: Remo√ß√£o de c√≥digo obsoleto ou limpeza
   - build: Mudan√ßas que afetam o sistema de build ou depend√™ncias externas
   - remover: Remo√ß√£o de funcionalidades ou arquivos
3. Se o usu√°rio forneceu uma tag, utilize-a apenas se for coerente com as modifica√ß√µes
4. Crie um t√≠tulo conciso que explique a mudan√ßa (n√£o mais que 50 caracteres)
5. Use o idioma especificado pelo usu√°rio
6. Regras de formata√ß√£o importantes:
   - use apenas letras min√∫sculas na mensagem de commit
   - n√£o use aspas (simples ou duplas) na mensagem
   - evite caracteres especiais como \ ou outros s√≠mbolos n√£o essenciais
7. Se emoji estiver habilitado: escolha o emoji apropriado e coloque DEPOIS da tag, formato: "tag emoji: t√≠tulo"
8. Se emoji N√ÉO estiver habilitado: formato padr√£o "tag: t√≠tulo conciso da mudan√ßa"

Retorne APENAS a mensagem de commit formatada, sem explica√ß√µes adicionais.

Exemplos SEM emoji:
- feat: implementa autenticacao de usuarios
- fix: corrige calculo de data incorreto
- docs: atualiza instrucoes de instalacao

Exemplos COM emoji:
- feat ‚ú®: implementa autenticacao de usuarios
- fix üêõ: corrige calculo de data incorreto
- docs üìù: atualiza instrucoes de instalacao`

const PromptType3 = `Voc√™ √© um especialista em an√°lise de c√≥digo e gera√ß√£o de mensagens de commit.

Analise as seguintes modifica√ß√µes de c√≥digo e gere uma mensagem de commit natural:

MODIFICA√á√ïES:
%s

INFORMA√á√ïES ADICIONAIS:
- Idioma para o commit: %s
- Descri√ß√£o curta fornecida pelo usu√°rio: %s

INSTRU√á√ïES:
1. Analise cuidadosamente as modifica√ß√µes para entender o prop√≥sito da mudan√ßa
2. Crie uma mensagem natural e descritiva que explique o que foi feito
3. Use o idioma especificado pelo usu√°rio
4. Seja conciso mas claro (n√£o mais que 72 caracteres)
5. Regras de formata√ß√£o importantes:
   - use apenas letras min√∫sculas na mensagem de commit
   - n√£o use aspas (simples ou duplas) na mensagem
   - evite caracteres especiais como \ ou outros s√≠mbolos n√£o essenciais
6. N√ÉO use tags sem√¢nticas (feat:, fix:, etc)
7. Se emoji estiver habilitado: coloque o emoji apropriado NO IN√çCIO da mensagem
8. Se emoji N√ÉO estiver habilitado: mensagem natural sem emoji
9. Escreva como se fosse uma descri√ß√£o natural do que foi implementado

Retorne APENAS a mensagem de commit formatada, sem explica√ß√µes adicionais.

Exemplos SEM emoji:
- implementa sistema de autenticacao de usuarios
- corrige calculo incorreto de datas
- atualiza documentacao de instalacao

Exemplos COM emoji:
- ‚ú® implementa sistema de autenticacao de usuarios
- üêõ corrige calculo incorreto de datas
- üìù atualiza documentacao de instalacao`

func GetPrompt(promptType int, useEmoji bool) (string, error) {
	var basePrompt string

	switch promptType {
	case 1:
		basePrompt = PromptType1
	case 2:
		basePrompt = PromptType2
	case 3:
		basePrompt = PromptType3
	default:
		basePrompt = PromptType1
	}

	if useEmoji {
		emojiAddition, err := GetEmojiPromptAddition()
		if err != nil {
			return "", fmt.Errorf("error loading emoji data: %v", err)
		}
		basePrompt += emojiAddition
	}

	return basePrompt, nil
}

const BaseCustomPrompt = `Voc√™ √© um especialista em an√°lise de c√≥digo e gera√ß√£o de mensagens de commit.

Analise as seguintes modifica√ß√µes de c√≥digo e gere uma mensagem de commit seguindo o formato espec√≠fico solicitado pelo usu√°rio:

MODIFICA√á√ïES:
%s

INFORMA√á√ïES ADICIONAIS:
- Idioma para o commit: %s
- Descri√ß√£o curta fornecida pelo usu√°rio: %s
- Tag sugerida pelo usu√°rio: %s

FORMATO PERSONALIZADO SOLICITADO PELO USU√ÅRIO:
%s

INSTRU√á√ïES:
1. Analise cuidadosamente as modifica√ß√µes para entender o prop√≥sito da mudan√ßa
2. Use o idioma especificado pelo usu√°rio
3. Considere a descri√ß√£o e tag fornecidas pelo usu√°rio, mas adapte conforme necess√°rio
4. Siga EXATAMENTE o formato personalizado solicitado pelo usu√°rio
5. Se emoji estiver habilitado: escolha o emoji apropriado e integre no formato personalizado (n√£o substitua partes do formato, apenas adicione o emoji)
6. Regras de formata√ß√£o importantes:
   - use apenas letras min√∫sculas na mensagem de commit
   - n√£o use aspas (simples ou duplas) na mensagem
   - evite caracteres especiais como \ ou outros s√≠mbolos n√£o essenciais

Retorne APENAS a mensagem de commit formatada conforme o formato personalizado solicitado, sem explica√ß√µes adicionais.`

func GetCustomPrompt(customFormatText string, useEmoji bool) (string, error) {
	if customFormatText == "" {
		return "", fmt.Errorf("custom format text is empty")
	}

	basePrompt := BaseCustomPrompt

	if useEmoji {
		emojiAddition, err := GetEmojiPromptAddition()
		if err != nil {
			return "", fmt.Errorf("error loading emoji data: %v", err)
		}
		basePrompt += emojiAddition
	}

	return basePrompt, nil
}
